parameters:
  # azure pipelines paramters
  job_name: github_release          # Default job name
  job_displayName: Github release   # Default displayName
  job_dependsOn: []                 # Dependencies to for the job to start
  job_condition: true               # Job condition
  job_post-steps: []                # Custom steps running after job

  # global parameters
  rust: stable                # Version of rust. Could be [stable, beta, nightly, 1.31, nightly-2018-08-01 ... ]

  release: true               # build with release flag
  target: x86_64-unknown-linux-gnu 
  
  copyFile_contents: |
      *
      !*.rlib
      !*.d
      !.*

  github:
    isPreRelease: true
    repositoryName: '$(Build.Repository.Name)'

  archiveName: '$(Build.Repository.Name)'

jobs:
- template: ../../jobs/cross-build.yml
  parameters:
    job_name: ${{ parameters['job_name'] }}
    job_displayName: ${{ parameters['job_displayName'] }}
    job_condition: ${{ parameters['job_condition'] }}
    job_dependsOn: ${{ parameters['job_dependsOn'] }} 

    release: ${{ parameters['release'] }} 
    target: ${{ parameters['target'] }}

    job_post-steps:
      - bash: |
          MY_TAG="$(Build.SourceBranch)"
          MY_TAG=${MY_TAG#refs/tags/}
          echo $MY_TAG
          echo "##vso[task.setvariable variable=build.my_tag]$MY_TAG"
          DATE="$(date +%Y-%m-%d)"
          echo "##vso[task.setvariable variable=build.date]$DATE"
        displayName: "Create date and tag variables"

      - task: CopyFiles@2
        displayName: Copy files for target ${{ parameters['target'] }}
        inputs:
           sourceFolder: "$(Build.SourcesDirectory)/target/${{ parameters['target'] }}/release"
           contents: ${{ parameters['copyFile_contents'] }}
           targetFolder: "$(Build.BinariesDirectory)/${{ parameters['target'] }}"
      - task: ArchiveFiles@2
        displayName: Gather assets
        inputs:
            rootFolderOrFile: "$(Build.BinariesDirectory)/${{ parameters['target'] }}"
            archiveType: zip
            tarCompression: none
            archiveFile: "$(Build.ArtifactStagingDirectory)/${{ parameters.archiveName }}-${{ parameters['target'] }}.zip"

      - task: GitHubRelease@0
        displayName: Create release
        inputs:
            gitHubConnection: ${{ parameters.github.gitHubConnection }}
            tagSource: manual
            title: '$(build.my_tag) - $(build.date)'
            tag: '$(build.my_tag)'
            assetUploadMode: replace
            action: edit
            assets: '$(Build.ArtifactStagingDirectory)/${{ parameters.archiveName }}*'
            repositoryName: ${{ parameters.github.repositoryName }}
            isPreRelease: ${{ parameters.github.isPreRelease }}
