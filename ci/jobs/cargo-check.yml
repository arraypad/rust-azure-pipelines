parameters:
  rust: stable                # Version of rust. Could be [stable, beta, nightly, 1.31, nightly-2018-08-01 ... ]

  # parameters from cargo check --help
  quiet: false                # No output printed to stdout
  package: []                 # Package(s) to check
  all: false                  # Check all packages in the workspace
  exclude: []                 # Exclude packages from the check
  lib: false                  # Check only this package's library
  bin: []                     # Check only the specified binary
  bins: false                 # Check all binaries
  example: []                 # Check only the specified example
  examples: false             # Check all examples
  test: []                    # Check only the specified test target
  tests: false                # Check all tests
  benche: []                  # Check only the specified bench target
  benches: false              # Check all benches
  all-targets: false          # Check all targets
  release: false              # Check artifacts in release mode, with optimizations
  profile: ""                 # Profile to build the selected target for
  features: ''                # Space-separated list of features to activate
  all-features: false         # Activate all available features
  no-default-features: false  # Do not activate the `default` feature
  target: ''                  # Check for the target triple
  target-dir: ''              # Directory for all generated artifacts
  manifest-path: ''           # Path to Cargo.toml
  message-format: ''          # Error format [default: human]  [possible values: human, json, short]
  verbose: false              # Use verbose output
  color: ''                   # Coloring: auto, always, never
  frozen: false               # Require Cargo.lock and cache are up to date
  locked: false               # Require Cargo.lock is up to date
  Z: []                       # Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details


jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  pool:
    vmImage: ubuntu-16.04
  variables:
    cliflags: ''
  steps:
  - template: ../steps/install-rust.yml
    parameters:
      rustup_toolchain: ${{ parameters.rust }}
 
  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --quiet'
    enabled: ${{ parameters['quiet'] }}
    displayName: "No output printed to stdout"

  - ${{ each pkg in parameters.package }}:
    - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --package ${{ pkg }}'
      displayName: "Add package to check '${{ pkg }}'"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --all'
    enabled: ${{ parameters.all }}
    displayName: "Check all packages in the workspace"

  - ${{ each pkg in parameters.exclude }}:
    - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --exclude ${{ pkg }}'
      displayName: "Exclude package from check '${{ pkg }}'"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --lib'
    enabled: ${{ parameters.lib }}
    displayName: "Check only this package's library"

  - ${{ each bin in parameters.bin }}:
    - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --bin ${{ bin }}'
      displayName: "Add binary '${{ bin }}' to check"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --bins'
    enabled: ${{ parameters.bins }}
    displayName: "Check all binaries"

  - ${{ each exa in parameters.example }}:
    - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --bin ${{ exa }}'
      displayName: "Add example '${{ exa }}' to check"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --examples'
    enabled: ${{ parameters.examples }}
    displayName: "check all examples"

  - ${{ each tes in parameters.test }}:
    - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --bin ${{ tes }}'
      displayName: "Add test '${{ tes }}' to check"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --benches'
    enabled: ${{ parameters.benches }}
    displayName: "check all bents"

  - ${{ each ben in parameters.bench }}:
    - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --bin ${{ ben }}'
      displayName: "Add bench '${{ ben }}' to check"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --benches'
    enabled: ${{ parameters.benches }}
    displayName: "check all benches"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --release'
    enabled: ${{ parameters.release }}
    displayName: "Set using release mode"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --profile ${{ parameters.profile }}'
    enabled: ${{ ne(parameters.profile, '') }}
    displayName: "Set profile ('${{ parameters.profile }}') to build the selected target for"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --features ${{ parameters.features }}'
    enabled: ${{ ne(parameters.features, '') }}
    displayName: "Space-separated list of features to activate: ${{ parameters.features }}"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --all-features'
    enabled: ${{ parameters['all-features'] }}
    displayName: "Activate all available features"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --no-default-features'
    enabled: ${{ parameters['no-default-features'] }}
    displayName: "Do not activate the `default` feature"

  - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --target ${{ parameters.target }}'
    enabled: ${{ ne(parameters.target, '')  }}
    displayName: "Check for the target triple"

  - script: echo "##vso[task.setvariable variable=cliflags]$(cliflags) --target-dir ${{ parameters['target-dir'] }}"
    enabled: ${{ ne(parameters['target-dir'], '') }}
    displayName: "Directory for all generated artifacts"

  - script: echo "##vso[task.setvariable variable=cliflags]$(cliflags) --manifest-path ${{ parameters['manifest-path'] }}"
    enabled: ${{ ne(parameters['manifest-path'], '') }}
    displayName: "Set custom path to Cargo.toml"

  - script: echo "##vso[task.setvariable variable=cliflags]$(cliflags) --message-format ${{ parameters['message-format'] }}"
    enabled: ${{ ne(parameters['message-format'], '') }}
    displayName: "Set error format to ${{ parameters['message-format'] }}"

  - script: echo "##vso[task.setvariable variable=cliflags]$(cliflags) --verbose }}"
    enabled: ${{ parameters['verbose'] }}
    displayName: "use verbose output"

  - script: echo "##vso[task.setvariable variable=cliflags]$(cliflags) --color ${{ parameters['color'] }}"
    enabled: ${{ ne(parameters['color'], '') }}
    displayName: "Coloring: ${{ parameters['color'] }}"

  - script: echo "##vso[task.setvariable variable=cliflags]$(cliflags) --frozen }}"
    enabled: ${{ parameters['frozen'] }}
    displayName: "Require Cargo.lock and cache are up to date"

  - script: echo "##vso[task.setvariable variable=cliflags]$(cliflags) --locked }}"
    enabled: ${{ parameters['locked'] }}
    displayName: "Require Cargo.lock is up to date"

  - ${{ each z in parameters['Z'] }}:
    - script: echo '##vso[task.setvariable variable=cliflags]$(cliflags) --Z ${{ z }}'
      displayName: "Add Z flag ${{ z }}"

  - script: echo $(cliflags)

  - script: cargo check $(cliflags)
    displayName: Run Cargo check with defined flags
     
    #   - ${{ if parameters.benches }}:
    #     - script: cargo check ${{variables.release }} --benches
    #       displayName: Check benchmarks
