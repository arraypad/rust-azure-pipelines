parameters:
  rust: stable
  name: cargo_test
  displayName: Cargo test

  # parameters from `cargo test --help`
  # TODO
  
  # parameters from libtest `cargo test -- --help`
  test-flags:
    include-ignored: false      # Run ignored and not ignored tests
    ignored: false              # Run only ignored tests
    exclude-should-panic: false # Excludes tests marked as should_panic
    test: false                 # Run tests and not benchmarks
    bench: false                # Run benchmarks instead of tests
    list: false                 # List all tests and benchmarks
    logfile: ''                 # Write logs to the specified file instead of stdout
    nocapture: false            # don't capture stdout/stderr of each task, allow
                                # printing directly
    test-threads: 0             # Number of threads used for running tests in parallel
    skip: []                    # Skip tests whose names contain FILTER (this flag can
                                # be used multiple times)
    quite: false                # Display one character per test instead of one line.
                                # Alias to --format=terse
    exact: false                # Exactly match filters rather than by substring
    color: ''                   # auto|always|never
                                # Configure coloring of output: auto = colorize if
                                # stdout is a tty and tests are run on serially
                                # (default); always = always colorize output; never =
                                # never colorize output;
    format: ''                  # pretty|terse|json
                                # Configure formatting of output: pretty = Print verbose
                                # output; terse = Display one character per test; json =
                                # Output a json document
    Z: []                       # unstable-options Enable nightly-only flags: unstable-options = Allow
                                # use of experimental features

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  strategy:
    matrix:
      Linux:
        vmImage: ubuntu-16.04

      ${{ if parameters.cross }}:
        MacOS:
          vmImage: macOS-10.13
        Windows:
          vmImage: vs2017-win2016
  pool:
    vmImage: $(vmImage)

  steps:
  - template: ../steps/install-rust.yml
    parameters:
      rust_toolchain: ${{ parameters.rust }}

  # *********************************************************************************************
  # parameters from libtest `cargo test -- --help`

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --include-ignored'
    enabled: ${{ parameters['test-args']['include-ignored'] }}
    displayName: "[cli flag modify]Run ignored and not ignored tests"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --ignored'
    enabled: ${{ parameters['test-args']['ignored'] }}
    displayName: "[cli flag modify]Run only ignored tests"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --exclude-should-panic'
    enabled: ${{ parameters['test-args']['exclude-should-panic'] }}
    displayName: "[cli flag modify]Excludes tests marked as should_panic"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --test'
    enabled: ${{ parameters['test-args']['test'] }}
    displayName: "[cli flag modify]Run tests and not benchmarks"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --bench'
    enabled: ${{ parameters['test-args']['bench'] }}
    displayName: "[cli flag modify]Run benchmarks instead of tests"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --list'
    enabled: ${{ parameters['test-args']['list'] }}
    displayName: "[cli flag modify]List all tests and benchmarks"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --logfile ${{ parameters['test-args']['logfile'] }}"
    enabled: ${{ ne(parameters['test-args']['logfile'], '') }}
    displayName: "[cli flag modify] Write logs to the specified file ${{ parameters['test-args']['logfile'] }}"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --nocapture'
    enabled: ${{ parameters['test-args']['nocapture'] }}
    displayName: "[cli flag modify]don't capture stdout/stderr of each task, allow printing it directly"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --test-threads ${{ parameters['test-args']['test-threads'] }}"
    enabled: ${{ parameters['test-args']['test-threads'] }}
    displayName: "[cli flag modify]Set number of threads used for running tests in parallel to ${{ parameters['test-args']['test-threads'] }}"

  - ${{ each s in parameters['test-args']['skip'] }}:
    - script: echo '##vso[task.setvariableV variable=check_flags]$(check_flags) --skip ${{ s }}'
      displayName: "[cli flag modify]Skip test using filter ${{ s }}"
      
  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --quite'
    enabled: ${{ parameters['test-args']['quite'] }}
    displayName: "[cli flag modify]Display one character per test instead of one line."

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --exact'
    enabled: ${{ parameters['test-args']['exact'] }}
    displayName: "[cli flag modify]Exactly match filters rather than by substring"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --color ${{ parameters['test-args']['color'] }}"
    enabled: ${{ ne(parameters['test-args']['color'], '') }}
    displayName: "[cli flag modify] Configure coloring of output: ${{ parameters['test-args']['color'] }}"
    
  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --format ${{ parameters['test-args']['format'] }}"
    enabled: ${{ ne(parameters['test-args']['format'], '') }}
    displayName: "[cli flag modify] Configure formatting of output: ${{ parameters['test-args']['format'] }}"

  - ${{ each z in parameters['test-args']['Z'] }}:
    - script: echo '##vso[task.setvariableV variable=check_flags]$(check_flags) --Z ${{ z }}'
      displayName: "[cli flag modify] unstable-option: ${{ z }}"

  # *********************************************************************************************
  - script: |
          cargo test
    displayName: cargo test
